schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Error {
  message: String!
}

interface Message {
  id: ID!
  role: ChatMessageRole!
  sentAt: DateTime!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Chat implements Node {
  id: ID!
  status: ChatStatus!
  messages("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): MessagesConnection
}

type ChatClosedError implements Error {
  message: String!
}

type ChatMessage implements Message {
  id: ID!
  content: String!
  role: ChatMessageRole!
  sentAt: DateTime!
}

type ChatMessageCreated {
  message: ChatMessage
}

type ChatMessageUpdated {
  message: ChatMessage
}

type ChatNotFoundError implements Error {
  message: String!
}

type ChatNotReadyForMessageError implements Error {
  message: String!
}

type ChatStatusChanged {
  chat: Chat
}

type CloseChatPayload {
  chat: Chat
  errors: [CloseChatError!]
}

type CreateChatPayload {
  chat: Chat
  errors: [CreateChatError!]
}

type DocumentMessage implements Message {
  id: ID!
  documentUrl: String!
  role: ChatMessageRole!
  sentAt: DateTime!
}

"A connection to a list of items."
type MessagesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MessagesEdge!]
  "A flattened list of the nodes."
  nodes: [ChatMessage!]
}

"An edge in a connection."
type MessagesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ChatMessage!
}

type Mutation {
  createChat: CreateChatPayload!
  sendMessage(input: SendMessageInput!): SendMessagePayload!
  closeChat(input: CloseChatInput!): CloseChatPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  chatById(id: ID!): Chat
  chatMessageById(id: ID!): Message!
}

type SendMessagePayload {
  message: ChatMessage
  errors: [SendMessageError!]
}

type Subscription {
  onChatMessagesUpdated(chatId: ID!): ChatMessageEvent!
  onChatStatusChanged(chatId: ID!): ChatStatusChanged!
}

type UnauthorizedError implements Error {
  message: String!
}

union ChatMessageEvent = ChatMessageCreated | ChatMessageUpdated | ChatStatusChanged

union CloseChatError = UnauthorizedError | ChatNotFoundError

union CreateChatError = UnauthorizedError

union SendMessageError = UnauthorizedError | ChatClosedError | ChatNotFoundError | ChatNotReadyForMessageError

input CloseChatInput {
  chatId: ID!
}

input SendMessageInput {
  chatId: ID!
  content: String!
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum ChatMessageRole {
  USER
  SYSTEM
  ASSISTANT
}

enum ChatStatus {
  READY
  PROCESSING
  CLOSED
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")