"""
A connection to a list of items.
"""
type ProductsConnection {
  """
  A list of edges.
  """
  edges: [ProductsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Product!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type DeleteProductTypePayload {
  deletedProductTypeId: Int
  errors: [DeleteProductTypeError!]
}

type Viewer {
  basket: Basket
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrdersConnection
  sessionId: String
  user: User
  username: String
}

"""
A connection to a list of items.
"""
type OrdersConnection {
  """
  A list of edges.
  """
  edges: [OrdersEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Order!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type OrderNotFoundError implements Error {
  message: String!
  orderId: Int!
}

"""
An edge in a connection.
"""
type MessagesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ChatMessage!
}

input CreateProductTypeInput {
  name: String!
}

type Brand implements Node {
  id: ID!
  name: String!
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductsConnection
}

union DeleteBrandError = BrandNotFoundError

type ChatMessageUpdated {
  message: ChatMessage
}

type ChatMessage implements Message {
  content: String!
  id: ID!
  role: ChatMessageRole!
  sentAt: DateTime!
}

input ProductsNameFilterInputTypeInput {
  in: [String!]
}

type PriceChangedError implements Error {
  message: String!
  product: Product!
}

type InvalidBasketItemId implements Error {
  id: String!
  message: String!
}

type BasketItem {
  id: String!
  product: Product!
  quantity: Int!
}

union RemoveFromBasketError = InvalidBasketItemId

input SetAwaitingValidationStatusInput {
  orderId: Int!
}

type Product implements Node {
  availableStock: Int!
  brand: Brand!
  description: String
  id: ID!
  imageUrl: URL!
  maxStockThreshold: Int!
  name: String!
  onReorder: Boolean!
  price: Decimal!
  restockThreshold: Int!
  type: ProductType!
}

input ProductsBrandIdFilterInputTypeInput {
  in: [ID!]
}

type CancelOrderPayload {
  canceledOrderId: Int
  errors: [CancelOrderError!]
}

input CancelOrderInput {
  orderId: Int!
}

input AddressInput {
  city: String!
  country: String!
  state: String!
  street: String!
  zipCode: String!
}

type Subscription {
  onChatMessagesUpdated(chatId: ID!): ChatMessageEvent!
  onChatStatusChanged(chatId: ID!): ChatStatusChanged!
}

type QuantityCannotBeNegativeError implements Error {
  message: String!
  quantity: Int!
}

"""
The built-in `Decimal` scalar type.
"""
scalar Decimal

union CloseChatError = UnauthorizedError | ChatNotFoundError

type SetAwaitingValidationStatusPayload {
  errors: [SetAwaitingValidationStatusError!]
  order: Order
}

input SendMessageInput {
  chatId: ID!
  content: String!
}

type ChatStatusChanged {
  chat: Chat
}

type Chat implements Node {
  id: ID!
  messages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MessagesConnection
  status: ChatStatus!
}

"""
The `Date` scalar represents an ISO-8601 compliant date type.
"""
scalar Date

union SetAwaitingValidationStatusError = OrderNotFoundError

type RemoveFromBasketPayload {
  basket: Basket
  errors: [RemoveFromBasketError!]
}

type FileExtensionNotAllowedError implements Error {
  allowedExtensions: [String!]!
  extension: String!
  message: String!
}

type ChatNotFoundError implements Error {
  message: String!
}

union RenameBrandError = BrandNotFoundError

type Order implements Node {
  address: Address
  date: DateTime!
  description: String
  id: ID!
  items: [OrderItem!]
  status: OrderStatus!
  total: Decimal!
  userId: String!
}

input RenameBrandInput {
  id: Int!
  name: String!
}

type ProductTypeNotFoundError implements Error {
  message: String!
  productTypeId: ID!
}

type SendMessagePayload {
  errors: [SendMessageError!]
  message: ChatMessage
}

"""
A connection to a list of items.
"""
type BrandsConnection {
  """
  A list of edges.
  """
  edges: [BrandsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Brand!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

union CreateOrderError = PriceChangedError | InvalidProductIdError

"""
An edge in a connection.
"""
type OrdersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Order!
}

"""
An edge in a connection.
"""
type BrandsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Brand!
}

type DeleteBrandPayload {
  deletedBrandId: Int
  errors: [DeleteBrandError!]
}

interface Error {
  message: String!
}

input DeleteBrandInput {
  id: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

interface Message {
  id: ID!
  role: ChatMessageRole!
  sentAt: DateTime!
}

type DocumentMessage implements Message {
  documentUrl: String!
  id: ID!
  role: ChatMessageRole!
  sentAt: DateTime!
}

type Mutation {
  addToBasket(input: AddToBasketInput!): AddToBasketPayload!
  cancelOrder(input: CancelOrderInput!): CancelOrderPayload!
  changeQuantity(input: ChangeQuantityInput!): ChangeQuantityPayload!
  clearBasket: ClearBasketPayload!
  closeChat(input: CloseChatInput!): CloseChatPayload!
  createBrand(input: CreateBrandInput!): CreateBrandPayload!
  createChat: CreateChatPayload!
  createOrder(input: CreateOrderInput!): CreateOrderPayload!
  createProduct(input: CreateProductInput!): CreateProductPayload!
  createProductType(input: CreateProductTypeInput!): CreateProductTypePayload!
  deleteBrand(input: DeleteBrandInput!): DeleteBrandPayload!
  deleteProductType(input: DeleteProductTypeInput!): DeleteProductTypePayload!
  removeFromBasket(input: RemoveFromBasketInput!): RemoveFromBasketPayload!
  renameBrand(input: RenameBrandInput!): RenameBrandPayload!
  renameProductType(input: RenameProductTypeInput!): RenameProductTypePayload!
  sendMessage(input: SendMessageInput!): SendMessagePayload!
  setAwaitingValidationStatus(
    input: SetAwaitingValidationStatusInput!
  ): SetAwaitingValidationStatusPayload!
}

type ChangeQuantityPayload {
  basket: Basket
  errors: [ChangeQuantityError!]
}

type Query {
  node(id: ID!): Node
  brandById(id: ID!): Brand!
  brandByName(name: String!): Brand!
  brands(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BrandsConnection
  chatById(id: ID!): Chat
  chatMessageById(id: ID!): Message!
  orderById(orderId: ID!): Order
  productById(id: ID!): Product!
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    where: ProductsFilterInputTypeInput
  ): ProductsConnection
  productTypeById(id: ID!): ProductType!
  productTypeByName(name: String!): ProductType!
  productTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductTypesConnection
  userById(id: ID!): User
  viewer: Viewer!
}

type BrandNotFoundError implements Error {
  message: String!
  productTypeId: ID!
}

input CreateBrandInput {
  name: String!
}

scalar URL @specifiedBy(url: "https://tools.ietf.org/html/rfc3986")

input RemoveFromBasketInput {
  id: String!
}

type Basket {
  id: ID!
  items: [BasketItem!]!
}

union ChatMessageEvent =
  | ChatMessageCreated
  | ChatMessageUpdated
  | ChatStatusChanged

union CancelOrderError = NoOrderFoundError

type RenameBrandPayload {
  brand: Brand
  errors: [RenameBrandError!]
}

type ProductType implements Node {
  id: ID!
  name: String!
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductsConnection
}

type OrderItem {
  product: Product!
  unitPrice: Decimal!
  units: Int!
}

"""
A connection to a list of items.
"""
type MessagesConnection {
  """
  A list of edges.
  """
  edges: [MessagesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [ChatMessage!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

enum ChatMessageRole {
  ASSISTANT
  SYSTEM
  USER
}

input ProductsFilterInputTypeInput {
  brandId: ProductsBrandIdFilterInputTypeInput
  name: ProductsNameFilterInputTypeInput
  typeId: ProductsTypeIdFilterInputTypeInput
}

union DeleteProductTypeError = ProductTypeNotFoundError

enum OrderStatus {
  AWAITING_VALIDATION
  CANCELLED
  PAID
  SHIPPED
  STOCK_CONFIRMED
  SUBMITTED
}

input RenameProductTypeInput {
  id: ID!
  name: String!
}

type UnauthorizedError implements Error {
  message: String!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

enum ChatStatus {
  CLOSED
  PROCESSING
  READY
}

type CreateOrderPayload {
  errors: [CreateOrderError!]
  order: Order
}

type NoOrderFoundError implements Error {
  message: String!
  orderId: Int!
}

type AddToBasketPayload {
  basket: Basket
  errors: [AddToBasketError!]
}

"""
A connection to a list of items.
"""
type ProductTypesConnection {
  """
  A list of edges.
  """
  edges: [ProductTypesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [ProductType!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
  VALIDATION
}

type CreateChatPayload {
  chat: Chat
  errors: [CreateChatError!]
}

type ClearBasketPayload {
  deleted: Boolean
}

input OrderItemInput {
  productId: ID!
  unitPrice: Decimal!
  units: Int!
}

type CreateBrandPayload {
  brand: Brand
}

input DeleteProductTypeInput {
  id: Int!
}

type InvalidProductIdError implements Error {
  message: String!
  productId: ID!
}

type ChatMessageCreated {
  message: ChatMessage
}

type MaxStockThresholdToLowError implements Error {
  message: String!
  minimumMaxStockThreshold: Int!
}

union ChangeQuantityError = QuantityCannotBeNegativeError | InvalidBasketItemId

input CreateProductInput {
  brandId: ID!
  description: String
  image: Upload
  maxStockThreshold: Int!
  name: String!
  price: Decimal!
  restockThreshold: Int!
  typeId: ID!
}

type ChatNotReadyForMessageError implements Error {
  message: String!
}

type Address {
  city: String!
  country: String!
  state: String!
  street: String!
  zipCode: String!
}

"""
An edge in a connection.
"""
type ProductTypesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProductType!
}

type CloseChatPayload {
  chat: Chat
  errors: [CloseChatError!]
}

input CloseChatInput {
  chatId: ID!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

type User implements Node {
  email: String
  id: ID!
  lastName: String!
  name: String!
  userName: String
}

type ChatClosedError implements Error {
  message: String!
}

type RenameProductTypePayload {
  errors: [RenameProductTypeError!]
  productType: ProductType
}

input CreateOrderInput {
  address: AddressInput!
  items: [OrderItemInput!]!
  paymentMethod: PaymentMethodInput!
}

input PaymentMethodInput {
  cardHolderName: String!
  cardNumber: String!
  cardType: CardType!
  expiration: Date!
  securityNumber: String!
}

input AddToBasketInput {
  productId: ID!
  quantity: Int!
}

input ProductsTypeIdFilterInputTypeInput {
  in: [ID!]
}

"""
An edge in a connection.
"""
type ProductsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Product!
}

input ChangeQuantityInput {
  id: String!
  quantity: Int!
}

type CreateProductPayload {
  errors: [CreateProductError!]
  product: Product
}

union CreateProductError =
  | MaxStockThresholdToLowError
  | FileExtensionNotAllowedError

type CreateProductTypePayload {
  productType: ProductType
}

enum CardType {
  AMEX
  MASTER_CARD
  VISA
}

union AddToBasketError = QuantityCannotBeNegativeError

union SendMessageError =
  | UnauthorizedError
  | ChatClosedError
  | ChatNotFoundError
  | ChatNotReadyForMessageError

union RenameProductTypeError = ProductTypeNotFoundError

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

union CreateChatError = UnauthorizedError
